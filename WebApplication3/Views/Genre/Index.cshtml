@model IEnumerable<WebApplication3.Models.Genre>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>%
        <th></th>
    </tr>

@foreach (var item in Model) {
    @Html.Partial("_AllGenre", item)
}

</table>

@for(var i =0;i<10;i++)
{
    <b>@i</b>
    if(i%2 ==0)
    {
        @:Even
    }
    else
    {
        <text>Odd </text>
    }
    <br />
}

@{
    int v = 2;
}
Value of v is @v
@* Step 5: Add a static (p class test) content and it will work now *@


<p class="test">This is a static p content click on it and it will work</p>


@*1. make a button *@\

@*Step 1*@
<button>Click</button>

@* Step 2:  have a static content to which we will add something dynamically *@
<h2> Dynamic tags will be added to this</h2>

@*Step 3:  Add something dynamic (p) to the static content(h2) on button click (button) *@
@*and generate a tag on button click so this tag will be dynamic example <p> *@
    <script>
        $("button").click(function () {
            $("h2").append("<p class='test'>hello from paragraph </p>");
        });
    </script>

@* Step 4: Add a click event to the new dynamic event (p class test) but it WILL NOT WORK *@

<script>
    $(".test").click(function () {
        alert("clicked");
    });
</script>


@*Step 6 Now we want the dynamic added p to respond to the click event. And I can do that by adding a listener to the parent elemnet (h2) and looking for the child as (p) as the source of  event trigger source*@

<script>
    $("h2").on("click", "p", function () {
        alert("Dynamic content clicked")
    });
</script>


