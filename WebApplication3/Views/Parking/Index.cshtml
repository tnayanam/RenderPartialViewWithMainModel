@using PagedList;
@using PagedList.Mvc;

@model IPagedList<WebApplication3.Models.Parking>


@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

@using(@Html.BeginForm("Index","Parking", FormMethod.Get))
{
    <b>Search By:</b>
    @Html.RadioButton("SearchBy", "Name", true) <text> Name </text>
    @Html.RadioButton("SearchBy", "Location") <text> Location</text> <br/>
    @Html.TextBox("Search")
    <input type="submit" value="Search" />
}

<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Name", "Index", new
       {
           sortBy = ViewBag.SortNameParameter,
           searchBy = Request.QueryString["searchBy"],
           search = Request["search"]
       })
        </th>
        <th>
            @Html.DisplayNameFor(model => model.First().Location)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Location)
            </td>
        </tr>
    }

</table>
@Html.PagedListPager(Model, page => Url.Action("Index", new
{
    page,
    searchBy = Request.QueryString["searchBy"],
    search = Request.QueryString["search"],
    sortBy = Request["sortBy"]
}),
    new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded, DisplayPageCountAndCurrentLocation = true})

<input id="test" type="email" value="test"/> 

@*input - tag,element*@
@* id, type, value == are the attributes, they come in name value pairs *@
@*  *@


@*difference between attribute and property:
    .prop() method should be used for boolean attributes/properties and for properties which do not exist in html (such as window.location).
    All other attributes (ones you can see in the html) can and should continue to be manipulated with the .attr() method.
        A property is the current state of the input element. An attribute is the default value.

*@

