using System.ServiceModel;

namespace HelloService
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the interface name "IHelloService" in both code and config file together.
    [ServiceContract] /// this is making this a WCF Service
    public interface IHelloServiceChanged
    {
        [OperationContract] // this is making sure that this method is avialbale for the clients
        string GetMessage(string name); // this is the service a client can invoke
    }
}


// Now supose we wanted to change the name of the interface
// 1. change the interface name
// 2. change the ionterface name in class which is implementing it
// 3. IMPORTANT: Now we need to change the contract name in the app.config file of the HOST

// Now it will throw the error when client tries to access it. 

/*
 {"The message with Action 'http://tempuri.org/IHelloService/GetMessage' cannot be processed at the receiver, due to a ContractFilter mismatch at the EndpointDispatcher. This may be because of either a contract mismatch (mismatched Actions between sender and receiver) or a binding/security mismatch between the sender and the receiver.  Check that sender and receiver have the same contract and the same binding (including security requirements, e.g. Message, Transport, None)."}
 */

// Clearly the WSDL generated by this host/service tells that one needs to create proxy class against the new interface but the proxy class 
// generated in the client is still based on old WSDL. Hence co,,unication cannot occur